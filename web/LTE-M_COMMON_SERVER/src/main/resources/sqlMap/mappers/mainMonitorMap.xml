<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ltem.dao.MainMonitorDAO">
	
	<select id="getAccessEventTime" resultType="java.lang.String">
		SELECT 
			DATE_FORMAT(MIN(EVENT_TIME),'%Y%m%d%H%i%s') AS EVENT_TIME
		FROM 
			TB_SM_COLLECT_LOG 
		WHERE 
			<!-- DATA_NAME IN ('TB_PM_ACCESS_KPI' , 'TB_PM_ALM_ACCESS_DTP') -->
			DATA_NAME IN ('TB_PM_ACCESS_KPI')
	</select>
	
	<select id="getEpcEventTime" resultType="java.util.HashMap">
		SELECT
			DATE_FORMAT((SELECT MIN(EVENT_TIME) FROM TB_SM_COLLECT_LOG WHERE DATA_NAME IN('TB_PM_MME_ATTACH','TB_PM_MME_SR')), '%Y%m%d%H%i%s') AS MME_EVENT_TIME,
			DATE_FORMAT((SELECT MIN(EVENT_TIME) FROM TB_SM_COLLECT_LOG WHERE DATA_NAME IN('TB_PM_PGW_CREATE','TB_PM_PGW_DELETE','TB_PM_PGW_MODIFY')), '%Y%m%d%H%i%s') AS PGW_EVENT_TIME,
			DATE_FORMAT((SELECT MIN(EVENT_TIME) FROM TB_SM_COLLECT_LOG WHERE DATA_NAME IN('TB_PM_SGW_ATTACH','TB_PM_SGW_MODIFY')), '%Y%m%d%H%i%s') AS SGW_EVENT_TIME,
			DATE_FORMAT((SELECT MIN(EVENT_TIME) FROM TB_SM_COLLECT_LOG WHERE DATA_NAME ='TB_PM_HSS'), '%Y%m%d%H%i%s') AS HSS_EVENT_TIME,
			DATE_FORMAT((SELECT MIN(EVENT_TIME) FROM TB_SM_COLLECT_LOG WHERE DATA_NAME ='TB_PM_PCRF'), '%Y%m%d%H%i%s') AS PCRF_EVENT_TIME
		FROM
			DUAL
	</select>

	<select id="getDuLevel" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
		    <choose>
				<when test='filterLevel == "0"'>
					IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) AS LEVEL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</when>
				<otherwise>
					IF(IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4)) AS LEVEL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</otherwise>
			</choose>
			<!-- ,(
				SELECT
					MIN(IFNULL(SERVER_STAT, 'N'))
				FROM
					TB_CO_EQUIP_ACT
				WHERE 
					EQUIP_TYPE = 2
			) AS SERVER_STAT -->
			,(
				SELECT
					MAX(MIN_ACT_SBY)
				FROM
					(
						SELECT
							MIN(CURRENT_ACT_SBY) AS MIN_ACT_SBY
						FROM
							TB_CO_EQUIP_ACT
						WHERE
							EQUIP_TYPE = 2
						GROUP BY
							SYSTEM_ID
					) A
			) AS MAX_ACT_SBY
		FROM(
			SELECT
				CASE 
					WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4
					WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_CRI_INCR THEN 1
					WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_MAJ_INCR THEN 2 
					WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_MIN_INCR THEN 3
					ELSE 4 END AS ATT_RATE_LEVEL
			    ,CASE 
					WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
					WHEN KPI_ATTEMPT = 0 THEN 4 WHEN KPI_ATTEMPT IS NULL THEN 4
					WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_CRI THEN 1 
					WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_MAJ THEN 2 
					WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_MIN THEN 3
					ELSE 4 END AS RRC_RATE_LEVEL
			    ,CASE 
					WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
					WHEN KPI_ERAB_ATTEMPT = 0 THEN 4 WHEN KPI_ERAB_ATTEMPT IS NULL THEN 4
					WHEN IFNULL((KPI_ANSWER/KPI_ERAB_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_CRI THEN 1
					WHEN IFNULL((KPI_ANSWER/KPI_ERAB_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_MAJ THEN 2
					WHEN IFNULL((KPI_ANSWER/KPI_ERAB_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_MIN THEN 3
					ELSE 4 END AS ANS_RATE_LEVEL
			    ,CASE 
					WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4
					WHEN IFNULL((KPI_CD/(KPI_ANSWER+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_CRI THEN 1
					WHEN IFNULL((KPI_CD/(KPI_ANSWER+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_MAJ THEN 2
					WHEN IFNULL((KPI_CD/(KPI_ANSWER+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_MIN THEN 3
					ELSE 4 END AS CD_RATE_LEVEL
			FROM(
				SELECT 
					SUM(KPI.ATTEMPT) AS KPI_ATTEMPT
			        <if test='STD_ATT == "0"'>
						,SUM(KPI.STD_ATT_5M) AS KPI_STD_ATT
					</if>
					<if test='STD_ATT == "1"'>
						,SUM(BASIC_DATA.ATTEMPT) AS KPI_STD_ATT
					</if>
			        ,SUM(KPI.RRC) AS KPI_RRC
			        ,SUM(KPI.ANSWER) AS KPI_ANSWER
			        ,SUM(KPI.CD) AS KPI_CD
			        ,SUM(KPI.ERAB_ATTEMPT) AS KPI_ERAB_ATTEMPT
			        ,SUM(KPI.ERAB_ADD_SUCCESS) AS KPI_ERAB_ADD_SUCC
					,THD.ATTEMPT AS THD_ATTEMPT
					,ATT_RATE_MIN_INCR
					,ATT_RATE_MAJ_INCR
					,ATT_RATE_CRI_INCR
					,SEIZER_RATE_MIN
					,SEIZER_RATE_MAJ
					,SEIZER_RATE_CRI
					,ANSWER_RATE_MIN
					,ANSWER_RATE_MAJ
					,ANSWER_RATE_CRI
					,CD_RATE_MIN
					,CD_RATE_MAJ
					,CD_RATE_CRI
					
				FROM 
					TB_PM_ACCESS_KPI AS KPI
					LEFT OUTER JOIN
					TB_PM_THD_DU AS THD
					ON KPI.WEEKDAY = THD.WEEKDAY AND KPI.HOUR_SCOPE = THD.HOUR_SCOPE
					<if test='STD_ATT == "1"'>
						LEFT OUTER JOIN
						(
							SELECT
								ATTEMPT,DU_ID,RU_CUID
							FROM
								TB_PM_ACCESS_KPI
							WHERE
								EVENT_TIME = STR_TO_DATE(#{STD_DATE},'%Y%m%d%H%i%s')
								<if test='select_equip != "0"'>
									AND DU_ID IN(${select_equip})
								</if>
								<if test='exceptSelect_equip != "0"'>
									AND DU_ID NOT IN(${exceptSelect_equip})
								</if>
						) AS BASIC_DATA
						ON KPI.DU_ID = BASIC_DATA.DU_ID AND KPI.RU_CUID = BASIC_DATA.RU_CUID
					</if>
					<!-- 사용중인 DU 관해서만 정보 가지고 오기 -->
					JOIN TB_CO_DU AS TCD
					ON KPI.DU_ID = TCD.DU_ID AND TCD.OPR_STATUS = 1
				WHERE
					KPI.EVENT_TIME = STR_TO_DATE(#{event_time},'%Y%m%d%H%i%s')
					<!-- <if test='select_equip != "0"'>
						AND KPI.DU_ID IN(#{select_equip})
					</if>
					<if test='exceptSelect_equip != "0"'>
						AND KPI.DU_ID NOT IN(#{exceptSelect_equip})
					</if> -->
				GROUP BY
					KPI.DU_ID
				) AS SUM_DATA
		) AS DATA
	</select>
	
	<select id="getRuLevel" parameterType="java.lang.String" resultType="java.util.HashMap">
		<if test='STD_ATT == "0"'>
			SELECT
		     <choose>
				<when test='filterLevel == "0"'>
					IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) AS LEVEL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</when>
				<otherwise>
					IF(IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4)) AS LEVEL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</otherwise>
			</choose>
			FROM(
				SELECT 
					ATT_RATE_5M_LEVEL AS ATT_RATE_LEVEL
				    ,RRC_RATE_LEVEL AS RRC_RATE_LEVEL
				    ,ANSWER_RATE_LEVEL AS ANS_RATE_LEVEL
				    ,CD_RATE_LEVEL AS CD_RATE_LEVEL
				FROM 
					TB_PM_ACCESS_KPI
				WHERE
					EVENT_TIME = STR_TO_DATE(#{event_time},'%Y%m%d%H%i%s')
					<if test='select_equip != "0"'>
					AND DU_ID IN(${select_equip})
					</if>
					<if test='exceptSelect_equip != "0"'>
						AND DU_ID NOT IN(${exceptSelect_equip})
					</if>
				) AS DATA
		</if>
		<if test='STD_ATT == "1"'>
			SELECT
			<choose>
				<when test='filterLevel == "0"'>
					IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) AS LEVEL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</when>
				<otherwise>
					IF(IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(MIN(ATT_RATE_LEVEL),MIN(RRC_RATE_LEVEL),MIN(ANS_RATE_LEVEL),MIN(CD_RATE_LEVEL)),4)) AS LEVEL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 1 THEN 1 ELSE 0 END) AS LEVEL_CRITICAL,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 2 THEN 1 ELSE 0 END) AS LEVEL_MAJOR,
				    SUM(CASE WHEN IF(IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4) <![CDATA[>]]> #{filterLevel}, 4, IFNULL(LEAST(ATT_RATE_LEVEL,RRC_RATE_LEVEL,ANS_RATE_LEVEL,CD_RATE_LEVEL),4)) = 3 THEN 1 ELSE 0 END) AS LEVEL_MINOR
				</otherwise>
			</choose>
			FROM(
				SELECT
					
						CASE 
						WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
						WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_MIN_INCR THEN 3
						WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_MAJ_INCR THEN 2 
						WHEN IF(KPI_ATTEMPT <![CDATA[<]]> KPI_STD_ATT, 0, IFNULL(((KPI_ATTEMPT-KPI_STD_ATT)/KPI_STD_ATT)*100,0)) <![CDATA[>=]]> ATT_RATE_CRI_INCR THEN 1 
						ELSE 4 END AS ATT_RATE_LEVEL
				    ,
						CASE 
						WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
						WHEN KPI_ATTEMPT = 0 THEN 4 WHEN KPI_ATTEMPT IS NULL THEN 4
						WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_CRI THEN 1 
						WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_MAJ THEN 2 
						WHEN IFNULL((KPI_RRC/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> SEIZER_RATE_MIN THEN 3
						ELSE 4 END  AS RRC_RATE_LEVEL
				    ,CASE 
						WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
						WHEN KPI_ATTEMPT = 0 THEN 4 WHEN KPI_ATTEMPT IS NULL THEN 4
						WHEN IFNULL((KPI_ANSWER/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_CRI THEN 1 
						WHEN IFNULL((KPI_ANSWER/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_MAJ THEN 2 
						WHEN IFNULL((KPI_ANSWER/KPI_ATTEMPT)*100,0) <![CDATA[<=]]> ANSWER_RATE_MIN THEN 3
						ELSE 4 END  AS ANS_RATE_LEVEL
				    ,CASE 
						WHEN THD_ATTEMPT <![CDATA[>=]]> KPI_ATTEMPT THEN 4 
						WHEN KPI_ATTEMPT = 0 THEN 4 WHEN KPI_ATTEMPT IS NULL THEN 4
						WHEN IFNULL((KPI_CD/(KPI_RRC+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_MIN THEN 3
						WHEN IFNULL((KPI_CD/(KPI_RRC+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_MAJ THEN 2 
						WHEN IFNULL((KPI_CD/(KPI_RRC+KPI_ERAB_ADD_SUCC))*100,0) <![CDATA[>=]]> CD_RATE_CRI THEN 1 
						ELSE 4 END  AS CD_RATE_LEVEL
				FROM(
					SELECT 
						KPI.ATTEMPT AS KPI_ATTEMPT
						,BASIC_DATA.ATTEMPT AS KPI_STD_ATT
				        ,KPI.RRC AS KPI_RRC
				        ,KPI.ANSWER AS KPI_ANSWER
				        ,KPI.CD AS KPI_CD
				        ,KPI.ERAB_ADD_SUCCESS AS KPI_ERAB_ADD_SUCC
						,THD.ATTEMPT AS THD_ATTEMPT
						,ATT_RATE_MIN_INCR
						,ATT_RATE_MAJ_INCR
						,ATT_RATE_CRI_INCR
						,SEIZER_RATE_MIN
						,SEIZER_RATE_MAJ
						,SEIZER_RATE_CRI
						,ANSWER_RATE_MIN
						,ANSWER_RATE_MAJ
						,ANSWER_RATE_CRI
						,CD_RATE_MIN
						,CD_RATE_MAJ
						,CD_RATE_CRI
						
					FROM 
						TB_PM_ACCESS_KPI AS KPI
						LEFT OUTER JOIN
						TB_PM_THD_DU AS THD
						ON KPI.WEEKDAY = THD.WEEKDAY AND KPI.HOUR_SCOPE = THD.HOUR_SCOPE
						LEFT OUTER JOIN
						(
							SELECT
								ATTEMPT,DU_ID,RU_CUID
							FROM
								TB_PM_ACCESS_KPI
							WHERE
								EVENT_TIME = STR_TO_DATE(#{STD_DATE},'%Y%m%d%H%i%s')
								<if test='select_equip != "0"'>
									AND DU_ID IN(${select_equip})
								</if>
								<if test='exceptSelect_equip != "0"'>
									AND DU_ID NOT IN(${exceptSelect_equip})
								</if>
						) AS BASIC_DATA
						ON KPI.DU_ID = BASIC_DATA.DU_ID AND KPI.RU_CUID = BASIC_DATA.RU_CUID
					WHERE
						KPI.EVENT_TIME = STR_TO_DATE(#{event_time},'%Y%m%d%H%i%s')
						<if test='select_equip != "0"'>
							AND KPI.DU_ID IN(${select_equip})
						</if>
						<if test='exceptSelect_equip != "0"'>
							AND KPI.DU_ID NOT IN(${exceptSelect_equip})
						</if>
					) AS SUM_DATA
			) AS DATA
		</if>
	</select>
	<select id="getDuActiveCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			TB_CO_EQUIP_ACT AS EA
		JOIN TB_CO_DU 		AS CU
		ON	EA.SYSTEM_ID = CU.DU_ID
		WHERE
			EA.EQUIP_TYPE = 2
			AND CU.OPR_STATUS = 1
			AND	CURRENT_ACT_SBY = 'A'
	</select>
	
	<select id="getUserMenuAuth" resultType="Map">
		SELECT MENU_ID
			 , MENU_AUTH
		  FROM NMS.TB_SE_MENU
		 WHERE MENU_ID IN ('8010010', '8010020', '8010030')
	</select>
</mapper>